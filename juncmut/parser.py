#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from . import __version__
from .run_juncmut import detect_main 
from .run_juncmut import annot_main 
from .run_juncmut import filt_bam_main 
from .run_juncmut import filt_main 
from .run_juncmut import sjclass_main 
import argparse

def create_parser():
    parser = argparse.ArgumentParser(prog = "juncmut")
    parser.add_argument("--version", action = "version", version = __version__)

    subparsers = parser.add_subparsers()
    
    #####
    # detect
    detect = subparsers.add_parser("detect", help = "Identify the mutation to create the abnormal alternative splicing.")
    
    detect.add_argument("sj_file", metavar = "input.SJ.out.tab", type = str, help = "Input splice junctions generated by STAR")
    detect.add_argument("bam_file", metavar = "input.bam", type = str, help = "Input RNA bam file")
    detect.add_argument("output_file", metavar = "juncmut.txt", type = str, help = "Output file")
    detect.add_argument("reference", metavar = "reference.fa", type = str, help = "Reference genome")
    detect.add_argument("genecode_gene_file", metavar = "gencode.v46.basic.annotation.gtf.gz", type = str, help = "GENCODE gene file")
    detect.add_argument('--control_file', nargs='*', type = str, help = "Control data created by merge_control (default: %(default)s)")
    detect.add_argument("--read_num_thres", type = int, default = 3, help = "Splicing junctions with reads >= read_num_thres is saved (default: %(default)s)")
    detect.add_argument("--freq_thres", type = float, default = 0.05, help = "Splicing junctions with reads >= freq_thres is saved (default: %(default)s)")
    detect.add_argument("--mut_num_thres", type = int, default = 1, help = "A mutation with mutation alleles >= mut_num_thres is a true candidate (default: %(default)s)")
    detect.add_argument("--mut_freq_thres", type = float, default = 0.05, help = "A mutation with frequency >= mut_freq_thres is a true candidate (default: %(default)s)")
    detect.add_argument("--support_read_rmdup_thres", type = int, default = 2, help = "A mutation with mutation alleles >= mut_num_thres is a true candidate (default: %(default)s)")
    detect.add_argument("--debug", action='store_true', help = "True keeps the intermediate files.")
    
    detect.set_defaults(func = detect_main)

    #####
    # filt_bam
    filt_bam = subparsers.add_parser("filt_bam", help = "Filt bam by juncmut.txt.")
    
    filt_bam.add_argument("input_file", metavar = "juncmut.txt", type = str, help = "juncmut.txt")
    filt_bam.add_argument("input_bam", metavar = "input.bam", type = str, help = "Input RNA bam file")
    filt_bam.add_argument("output_bam", metavar = "juncmut.filt.bam", type = str, help = "Output bam file")
    filt_bam.add_argument("genecode_gene_file", metavar = "wgEncodeGencodeCompV31_hg38.txt.gz", type = str, help = "GENCODE gene file")
    
    filt_bam.set_defaults(func = filt_bam_main)

    #####
    # annot
    annot = subparsers.add_parser("annot", help = "Annotate gnomAD information onto the retrieved mutation.")
    
    annot.add_argument("input_file", metavar = "juncmut.txt", type = str, help = "Input file (such as juncmut.txt generated by juncmut)")
    annot.add_argument("output_file", metavar = "juncmut.annot.txt", type = str, help = "Output annotated file")
    annot.add_argument("reference", metavar = "reference.fa", type = str, help = "Reference genome")
    annot.add_argument("--acmg_file", metavar = "ACMG_SF_v3.2.txt", default = "", type = str, help = "")
    annot.add_argument("--cgc_file", metavar = "CancerGeneSensus_GRCh38_v97.txt", default = "", type = str, help = "")
    annot.add_argument("--cgd_file", metavar = "CGD.txt", default = "", type = str, help = "")
    annot.add_argument("--clinvar_file", metavar = "clinvar.vcf.gz", default = "", type = str, help = "")
    annot.add_argument("--clinvar_star234_file", metavar = "clinvar_star234_gene.txt", default = "", type = str, help = "")
    annot.add_argument("--dosage_sensitivity_file", metavar = "clingen_dosage_sensitivity_230105.proc.txt", default = "", type = str, help = "")
    annot.add_argument("--gnomad", metavar = "gnomad.genomes.r3.0.sites.vcf.bgz", default = "", type = str, help = "")
    annot.add_argument("--pancan_file", metavar = "PANAtlas_CellTableS1.txt", default = "", type = str, help = "")
    annot.add_argument("--debug", action='store_true', help = "True keeps the intermediate files.")
    
    annot.set_defaults(func = annot_main)

    #####
    # filt
    filt = subparsers.add_parser("filt", help = "Filt mutations by SJ_Overlap_Count and gnomAD_AF.")
    
    filt.add_argument("input_file", metavar = "juncmut.annot.txt", type = str, help = "Input file(such as juncmut.txt generated by juncmut)")
    filt.add_argument("output_file", metavar = "juncmut.annot.filt.txt", type = str, help = "Output filted file")

    filt.set_defaults(func = filt_main)

    #####
    # sjclass
    sjclass = subparsers.add_parser("sjclass", help = "Classify mutations based on transcription consequence categories.")
    sjclass.add_argument("input_file", metavar = "juncmut.annot.txt", type = str, help = "Input file(such as file generated by juncmut")
    sjclass.add_argument("output_file", metavar = "juncmut.annot.sjclass.txt", type = str, help = "Output classified file")
    sjclass.add_argument("bam_file", metavar = "juncmut.filt.bam", type = str, help = "Input RNA bam file")
    sjclass.add_argument("sj_file", metavar = "input.SJ.out.tab", type = str, help = "Input splice junctions generated by STAR")
    sjclass.add_argument("reference", metavar = "reference.fa", type = str, help = "Reference genome")
    sjclass.add_argument("--gencode", metavar = "gencode.v46.basic.annotation.gtf.gz", default = None, type = str, help = "GENCODE gene file")
    #sjclass.add_argument("--mane", metavar = "MANE.GRCh38.v1.0.ensembl_genomic.gff.gz", default = None, type = str, help = "MANE file")
    sjclass.add_argument("--depth_th", metavar = "depth_th", default = 1, type = int, help = "Depth in the intron for classification.")
    sjclass.add_argument("--debug", help = "keep temporary files.", action='store_true')

    sjclass.set_defaults(func = sjclass_main)

    return parser
